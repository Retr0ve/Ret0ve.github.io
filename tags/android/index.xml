<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Retr0ve&#39;s Veil Cave</title>
    <link>http://Retr0ve.github.io/tags/android/</link>
    <description>Recent content in Android on Retr0ve&#39;s Veil Cave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 May 2021 21:00:06 +0800</lastBuildDate><atom:link href="http://Retr0ve.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android[2] - Playing Music when Receiving Custom Broadcast</title>
      <link>http://Retr0ve.github.io/posts/android-2/</link>
      <pubDate>Tue, 11 May 2021 21:00:06 +0800</pubDate>
      
      <guid>http://Retr0ve.github.io/posts/android-2/</guid>
      <description>当收到自定义广播时播放音乐 想要在收到广播的时候播放音乐，大体分为两个步骤。首先要接收到广播，然后通过服务播放音乐。
01 广播 Android 应用与 Android 系统和其他 Android 应用之间可以相互收发广播消息，这与发布-订阅设计模式相似。这些广播会在所关注的事件发生时发送。举例来说，Android 系统会在发生各种系统事件时发送广播，例如系统启动或设备开始充电时。再比如，应用可以发送自定义广播来通知其他应用它们可能感兴趣的事件（例如，一些新数据已下载）。
接收广播有两种方式，一种是使用静态文件注册广播接收器、另外一种是动态的注册广播接收器。此处我们将分别使用两种方法介绍如何接收系统广播和自定义广播。
系统广播 我们将使用静态注册广播接收器的方式来接收接收短信产生的系统广播。
  再Manifests.xml文件中声明Receiver
&amp;lt;receiver android:name=&amp;#34;.SmsReceiver&amp;#34; android:enabled=&amp;#34;true&amp;#34; android:exported=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;#34;android.provider.Telephony.SMS_RECEIVED&amp;#34;/&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/receiver&amp;gt;   创建 BroadcastReceiver 子类并实现 onReceive(Context, Intent)
package xyz.retrove.androidcrouse2; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; public class SmsReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { Intent serviceIntent = new Intent(context, MyService.class); //在广播组件里，通过上下文对象启动音乐播放服务组件  context.startService(serviceIntent); //新建调用Activity组件的意图  Intent activityIntent = new Intent(context, MainActivity.</description>
    </item>
    
    <item>
      <title>Android[1] - Wechat Like Interface Design</title>
      <link>http://Retr0ve.github.io/posts/android-1/</link>
      <pubDate>Mon, 05 Apr 2021 12:06:24 +0800</pubDate>
      
      <guid>http://Retr0ve.github.io/posts/android-1/</guid>
      <description>Android 类微信界面设计 设计APP门户界面，其中包含4个tab切换效果。
01 功能分析 微信的界面非常的简单（如图所示），顶端是一个操作栏，上面有此APP的名字以及一个加号按钮，点击加号按钮后会出现一个下拉菜单展示所有可执行的快捷操作。底部是一个导航菜单，点击四个不同的按钮，屏幕中间的内容会跟随其一同变化。
因此，我们大致的思路是：页面应该包含一个TopAppBar，一个ButtomNavigationMenu以及四个Fragment。
为了与Android的官方风格保持一致，这里我们使用 Android Material Design 控件进行开发，最后的效果应该如下图所示。
02 代码实现 首先，我们需要在activity_main.xml中添加TopAppBar和ButtomNavigationMenu两个控件以及中间显示内容的Fragment，并且为他们添加合适的约束条件。
 需要注意的是，这里的Fragment由于需要动态填充，需要使用FragmentContainerView并且不要指定fragment的name。
 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34; xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; android:orientation=&amp;#34;vertical&amp;#34; tools:context=&amp;#34;.MainActivity&amp;#34;&amp;gt; &amp;lt;com.google.android.material.appbar.AppBarLayout android:id=&amp;#34;@+id/appBarLayout&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34;&amp;gt; &amp;lt;com.google.android.material.appbar.MaterialToolbar android:id=&amp;#34;@+id/topAppBar&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; style=&amp;#34;@style/Widget.MaterialComponents.Toolbar.Primary&amp;#34; app:menu=&amp;#34;@menu/top_app_bar&amp;#34; app:navigationIcon=&amp;#34;@drawable/ic_android_black_24dp&amp;#34; app:title=&amp;#34;@string/page_title&amp;#34; /&amp;gt; &amp;lt;/com.google.android.material.appbar.AppBarLayout&amp;gt; &amp;lt;androidx.fragment.app.FragmentContainerView android:id=&amp;#34;@+id/content&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;0dp&amp;#34; app:layout_constraintBottom_toTopOf=&amp;#34;@+id/bottom_navigation&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toBottomOf=&amp;#34;@+id/appBarLayout&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.bottomnavigation.BottomNavigationView android:id=&amp;#34;@+id/bottom_navigation&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:menu=&amp;#34;@menu/bottom_navigation_menu&amp;#34; /&amp;gt; &amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt; TopAppBar 由于在activity_main.xml当中我们指定了顶部的应用栏的菜单为@menu/top_app_bar，我们需要在menu文件夹下创建一个名为top_app_bar的菜单文件。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;menu xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:app=&amp;#34;http://schemas.</description>
    </item>
    
  </channel>
</rss>
